#version 400

#extension GL_EXT_gpu_shader4 : enable 

layout(points, invocations = 1) in;
layout(triangle_strip, max_vertices = 16) out;
uniform mat4 modelview;
uniform isampler2D edgeTableTex;
uniform isampler2D triTableTex;
uniform float isolevel;
uniform float scale;
uniform vec3 cameraPos;
uniform float globalTime;

in vec3 vColor[];
in float vSides[];
out vec3 fColor;
out float dist;

const float PI = 3.1415926;

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0; }

float mod289(float x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0; }

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

float permute(float x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float taylorInvSqrt(float r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec4 grad4(float j, vec4 ip)
  {
  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
  vec4 p,s;

  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
  s = vec4(lessThan(p, vec4(0.0)));
  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 

  return p;
  }
						
// (sqrt(5) - 1)/4 = F4, used once below
#define F4 0.309016994374947451

float snoise(vec4 v)
  {
  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4
                        0.276393202250021,  // 2 * G4
                        0.414589803375032,  // 3 * G4
                       -0.447213595499958); // -1 + 4 * G4

// First corner
  vec4 i  = floor(v + dot(v, vec4(F4)) );
  vec4 x0 = v -   i + dot(i, C.xxxx);

// Other corners

// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)
  vec4 i0;
  vec3 isX = step( x0.yzw, x0.xxx );
  vec3 isYZ = step( x0.zww, x0.yyz );
//  i0.x = dot( isX, vec3( 1.0 ) );
  i0.x = isX.x + isX.y + isX.z;
  i0.yzw = 1.0 - isX;
//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );
  i0.y += isYZ.x + isYZ.y;
  i0.zw += 1.0 - isYZ.xy;
  i0.z += isYZ.z;
  i0.w += 1.0 - isYZ.z;

  // i0 now contains the unique values 0,1,2,3 in each channel
  vec4 i3 = clamp( i0, 0.0, 1.0 );
  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );

  //  x0 = x0 - 0.0 + 0.0 * C.xxxx
  //  x1 = x0 - i1  + 1.0 * C.xxxx
  //  x2 = x0 - i2  + 2.0 * C.xxxx
  //  x3 = x0 - i3  + 3.0 * C.xxxx
  //  x4 = x0 - 1.0 + 4.0 * C.xxxx
  vec4 x1 = x0 - i1 + C.xxxx;
  vec4 x2 = x0 - i2 + C.yyyy;
  vec4 x3 = x0 - i3 + C.zzzz;
  vec4 x4 = x0 + C.wwww;

// Permutations
  i = mod289(i); 
  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);
  vec4 j1 = permute( permute( permute( permute (
             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));

// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope
// 7*7*6 = 294, which is close to the ring size 17*17 = 289.
  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;

  vec4 p0 = grad4(j0,   ip);
  vec4 p1 = grad4(j1.x, ip);
  vec4 p2 = grad4(j1.y, ip);
  vec4 p3 = grad4(j1.z, ip);
  vec4 p4 = grad4(j1.w, ip);

// Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;
  p4 *= taylorInvSqrt(dot(p4,p4));

// Mix contributions from the five corners
  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);
  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);
  m0 = m0 * m0;
  m1 = m1 * m1;
  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))
               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;

  }
vec4 sampleFunction( vec3 p ) {
    return vec4(
        16.0*p.y*p.z +
        4.0*2.0*p.x,
        16.0*p.x*p.z +
        4.0*2.0*p.y,
        16.0*p.x*p.y +
        4.0*2.0*p.z,
        16.0*p.x*p.y*p.z +
        4.0*p.x*p.x +
        4.0*p.y*p.y +
        4.0*p.z*p.z - 1.0
        );
}

//Compute interpolated vertex along an edge 
vec3 vertexInterp(float isolevel, vec3 v0, float l0, vec3 v1, float l1) {
    return mix(v0, v1, (isolevel-l0)/(l1-l0));
}
 

//Get triangle table value 
int triTableValue(int i, int j){
    return texelFetch2D(triTableTex, ivec2(j, i), 0).x;
}

float density(vec3 point) {
	float dens = point.y-5;
	return snoise(vec4(point/scale,globalTime));
} 

void main() {
    //Currently meaningless
	if(true) {
        
        //TODO Make uniform
		vec3 vertDecals[8];
        vertDecals[0] = vec3(0,0,0);
        vertDecals[1] = vec3(1,0,0);
        vertDecals[2] = vec3(1,1,0);
        vertDecals[3] = vec3(0,1,0);
        vertDecals[4] = vec3(0,0,1);
        vertDecals[5] = vec3(1,0,1);
        vertDecals[6] = vec3(1,1,1);
        vertDecals[7] = vec3(0,1,1);
        float cubeVal[8];
        for(int i =0;i<8;i++) {
            cubeVal[i] = density(vertDecals[i]+gl_in[0].gl_Position.xyz);
        }


		//float isolevel = 0.3;
        int cubeindex = int(cubeVal[0]<isolevel);
        cubeindex += int(cubeVal[1]<isolevel)*2;
        cubeindex += int(cubeVal[2]<isolevel)*4;
        cubeindex += int(cubeVal[3]<isolevel)*8;
        cubeindex += int(cubeVal[4]<isolevel)*16;
        cubeindex += int(cubeVal[5]<isolevel)*32;
        cubeindex += int(cubeVal[6]<isolevel)*64;
        cubeindex += int(cubeVal[7]<isolevel)*128;
        //Cube makes up no part of surface
		if(cubeindex == 0 || cubeindex == 255)
			return;
        vec3 cubePos[8];
        for(int i = 0;i<8;i++) {
            cubePos[i] = gl_in[0].gl_Position.xyz + vertDecals[i];
        }

		
		vec3 vertlist[12];
        //Find the vertcices where the surface intersects the cube
		vertlist[0] = vertexInterp(isolevel, cubePos[0], cubeVal[0], cubePos[1], cubeVal[1]);
        vertlist[1] = vertexInterp(isolevel, cubePos[1], cubeVal[1], cubePos[2], cubeVal[2]);
        vertlist[2] = vertexInterp(isolevel, cubePos[2], cubeVal[2], cubePos[3], cubeVal[3]);
        vertlist[3] = vertexInterp(isolevel, cubePos[3], cubeVal[3], cubePos[0], cubeVal[0]);
        vertlist[4] = vertexInterp(isolevel, cubePos[4], cubeVal[4], cubePos[5], cubeVal[5]);
        vertlist[5] = vertexInterp(isolevel, cubePos[5], cubeVal[5], cubePos[6], cubeVal[6]);
        vertlist[6] = vertexInterp(isolevel, cubePos[6], cubeVal[6], cubePos[7], cubeVal[7]);
        vertlist[7] = vertexInterp(isolevel, cubePos[7], cubeVal[7], cubePos[4], cubeVal[4]);
        vertlist[8] = vertexInterp(isolevel, cubePos[0], cubeVal[0], cubePos[4], cubeVal[4]);
        vertlist[9] = vertexInterp(isolevel, cubePos[1], cubeVal[1], cubePos[5], cubeVal[5]);
        vertlist[10] = vertexInterp(isolevel, cubePos[2], cubeVal[2], cubePos[6], cubeVal[6]);
        vertlist[11] = vertexInterp(isolevel, cubePos[3], cubeVal[3], cubePos[7], cubeVal[7]);
        float sdf = vSides[0]/vSides[0];
        //Stops compiler from optimizing modelview out!!!! ANNOYING!
		
		int i = 0;
        if(vSides[0]==5)
		{
            i=1;
        }

		while(true) {
            if(triTableValue(cubeindex,i)!=-1) {
                //Generate first vertex
				
				fColor = normalize(vColor[0] + 1*(gl_in[0].gl_Position.xyz+vec3(0,0,0)));
				vec4 pos1 = vec4(vertlist[triTableValue(cubeindex,i)],1);
                
                //Generate secound vertex
				vec4 pos2 = vec4(vertlist[triTableValue(cubeindex,i+1)],1);
                
                //Generate third vertex
				vec4 pos3 = vec4(vertlist[triTableValue(cubeindex,i+2)],1);
                
				fColor = normalize(normalize(cross((pos2-pos1).xyz,(pos3-pos1).xyz).xyz)/2 + vec3(0.5,0.5,0.5)).xyz;
				fColor += vColor[0]*0.001;
				
				
				gl_Position = modelview * pos1;		
				dist = length(gl_in[0].gl_Position.xyz -cameraPos);
				EmitVertex();
						
				gl_Position = modelview * pos2;
				dist = length(gl_in[0].gl_Position.xyz -cameraPos);
				EmitVertex();
				
				gl_Position = modelview * pos3;
				dist = length(gl_in[0].gl_Position.xyz -cameraPos);
				EmitVertex();

                //Finish triangle
				EndPrimitive();
            }
			else {
                break;
            }

			i = i+3;
            //Increment the loop
		}

		/*if(triTableValue(0,0)==-1){
			gl_Position = modelview * (gl_in[0].gl_Position*sdf);
			EmitVertex();
			gl_Position = modelview * (gl_in[0].gl_Position+vec4(0,0,1,0));
			EmitVertex();
			gl_Position = modelview * (gl_in[0].gl_Position+vec4(0,1,0,0));
			EmitVertex();
			EndPrimitive();
		}*/
		//while(true){ 
		//	if(triTableValue(cubeindex, i)!=-1){ 
		//		//Generate first vertex of triangle// 
		//		//Fill position varying attribute for fragment shader 
		//		position= vec4(vertlist[triTableValue(cubeindex, i)], 1); 
		//		//Fill gl_Position attribute for vertex raster space position 
		//		gl_Position = gl_ModelViewProjectionMatrix* position; 
		//		EmitVertex(); 
			 
		//		//Generate second vertex of triangle// 
		//		//Fill position varying attribute for fragment shader 
		//		position= vec4(vertlist[triTableValue(cubeindex, i+1)], 1); 
		//		//Fill gl_Position attribute for vertex raster space position 
		//		gl_Position = gl_ModelViewProjectionMatrix* position; 
		//		EmitVertex(); 
			 
		//		//Generate last vertex of triangle// 
		//		//Fill position varying attribute for fragment shader 
		//		position= vec4(vertlist[triTableValue(cubeindex, i+2)], 1); 
		//		//Fill gl_Position attribute for vertex raster space position 
		//		gl_Position = gl_ModelViewProjectionMatrix* position; 
		//		EmitVertex(); 
			 
		//		//End triangle strip at firts triangle 
		//		EndPrimitive(); 
		//	}else{ 
		//		break; 
		//	} 
 
		//	i=i+3; //Comment it to test the strange bug 
		//} 

		//for (int i = 0; i <= vSides[0]; i++) {
		//	gl_Position = modelview * gl_in[0].gl_Position;
		//	EmitVertex();

		//	// Angle between each side in radians
		//	float ang = PI * -2.0 / vSides[0] * i;
		//	// Offset from center of point (0.3 to accomodate for aspect ratio)
		//	vec4 offset = vec4(cos(ang) * 0.3, -sin(ang) * 0.4, 0.0, 0.0);
		//	gl_Position = modelview * (gl_in[0].gl_Position + offset);
		//	EmitVertex();
		//}

		//EndPrimitive();
	}
}



